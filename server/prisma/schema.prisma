generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider        = "prisma-dbml-generator"
  previewFeatures = ["fullTextSearch"]
}

model User {
  id                       String      @id @default(uuid())
  email                    String      @unique
  firstName                String      @map("first_name")
  lastName                 String?     @map("last_name")
  password                 String
  phoneNumber              String?     @unique @map("phone_number")
  isPhoneVerified          Boolean     @default(false) @map("is_phone_verified")
  isEmailVerified          Boolean     @default(false) @map("is_email_verified")
  isMultiFactorAuthEnabled Boolean     @default(false) @map("is_multi_factor_auth_enabled")
  profilePicture           Image?      @relation("profilePicture", fields: [profilePictureId], references: [id])
  profilePictureId         String?     @map("profile_picture_id")
  refreshToken             String?     @map("refresh_token")
  createdAt                DateTime    @default(now()) @map("created_at")
  updatedAt                DateTime    @default(now()) @updatedAt @map("updated_at")
  deletedAt                DateTime?   @map("deleted_at")
  associatedWorkspaces     Workspace[] @relation("associatedWorkspaces")
  otp                      Otp[]       @relation("otp")
  ownedWorkspaces          Workspace[] @relation("ownedBy")
  createdWorkdpaces        Workspace[] @relation("createdBy")
  defaultWorkspace         Workspace?  @relation("defaultWorkspace", fields: [defaultWorkspaceId], references: [id])
  defaultWorkspaceId       String?     @map("default_workspace_id")

  @@index([email, phoneNumber, createdAt])
  @@map("users")
}

model Role {
  id          String       @id @default(uuid())
  roleName    String       @map("role_name")
  description String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at")
  deletedAt   DateTime?    @map("deleted_at")
  workspaceId String       @map("workspace_id")
  permissions Permission[]

  @@unique([roleName, workspaceId])
  @@index([roleName, workspaceId])
  @@map("roles")
}

enum PermissionActions {
  CREATE
  READ
  UPDATE
  DELETE
  PRINT
  EXPORT
  IMPORT
  MANAGE
  APPROVE
  REJECT
  DOWNLOAD
}

model Permission {
  id          String              @id @default(uuid())
  moduleName  String
  actions     PermissionActions[]
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @default(now()) @updatedAt @map("updated_at")
  deletedAt   DateTime?           @map("deleted_at")
  role        Role                @relation(fields: [roleId], references: [id])
  roleId      String              @map("role_id")
  workspaceId String              @map("workspace_id")

  @@unique([moduleName, roleId])
  @@index([moduleName, workspaceId])
  @@map("permissions")
}

enum OtpSentTo {
  EMAIL
  PHONE
}

model Otp {
  id          String    @id @default(uuid())
  otp         Int       @map("otp")
  email       String?
  phoneNumber String?   @map("phone_number")
  createdAt   DateTime  @default(now()) @map("created_at")
  expiredAt   DateTime  @map("expired_at")
  user        User?     @relation("otp", fields: [userId], references: [id])
  userId      String?   @unique @map("user_id")
  sentOver    OtpSentTo @map("sent_over")
  verifiedAt  DateTime? @map("verified_at")

  @@unique([otp, userId])
  @@map("otps")
}

model Workspace {
  id               String    @id @default(uuid())
  name             String
  description      String?
  logo             Image?    @relation("logo", fields: [logoId], references: [id])
  logoId           String?   @map("logo_id")
  website          String?
  country          String?
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt        DateTime? @map("deleted_at")
  users            User[]    @relation("associatedWorkspaces")
  createdBy        User      @relation("createdBy", fields: [createdById], references: [id])
  createdById      String    @map("created_by")
  ownedBy          User      @relation("ownedBy", fields: [ownedById], references: [id])
  ownedById        String    @map("owned_by")
  defaultWorkspace User[]    @relation("defaultWorkspace")

  @@index([name])
  @@map("workspaces")
}

model Image {
  id             String      @id @default(uuid())
  url            String
  publicId       String      @map("public_id")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")
  workspace      Workspace[] @relation("logo")
  user           User[]      @relation("profilePicture")
  companyLogo    Company[]   @relation("company_logo")
  contactProfile Contact[]   @relation("contact_profile")

  @@map("images")
}

model Tag {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  workspaceId String    @map("workspace_id")
  contact     Contact[] @relation("contact_tags")
  company     Company[] @relation("company_tags")

  @@unique([name, workspaceId])
  @@index([name])
}

enum PreferredContactMethod {
  Email
  Phone
}

model Company {
  id                     String                  @id @default(uuid())
  name                   String
  email                  String
  secondaryEmail         String?                 @map("secondary_email")
  workspaceId            String                  @map("workspace_id")
  phone                  String?
  secondaryPhone         String?                 @map("secondary_phone")
  website                String?
  preferredContactMethod PreferredContactMethod? @map("preferred_contact_method")
  addresses              Address[]
  logo                   Image?                  @relation("company_logo", fields: [logoId], references: [id])
  logoId                 String?                 @map("logo_id")
  referalSource          Source[]                @relation("referal_sources")
  preferredCurrency      String?                 @map("preferred_currency")
  preferredLanguage      String?                 @map("preferred_language")
  createdAt              DateTime                @default(now()) @map("created_at")
  updatedAt              DateTime                @default(now()) @updatedAt @map("updated_at")
  deletedAt              DateTime?               @map("deleted_at")
  isDeleted              Boolean                 @default(false) @map("is_deleted")
  contacts               Contact[]
  tags                   Tag[]                   @relation("company_tags")

  @@unique([name, workspaceId])
  @@unique([email, workspaceId])
  @@unique([phone, workspaceId])
  @@index([name])
  @@map("companies")
}

model Contact {
  id                String    @id @default(uuid())
  firstName         String    @map("first_name")
  lastName          String?   @map("last_name")
  email             String?
  phone             String?
  secondaryEmail    String?   @map("secondary_email")
  workspaceId       String    @map("workspace_id")
  secondaryPhone    String?   @map("secondary_phone")
  contactProfile    Image?    @relation("contact_profile", fields: [profileId], references: [id])
  profileId         String?   @map("profile_id")
  referalSource     Source[]  @relation("referal_sources")
  preferredCurrency String?   @map("preferred_currency")
  preferredLanguage String?   @map("preferred_language")
  associatedCompany Company?  @relation(fields: [companyId], references: [id])
  companyId         String?   @map("company_id")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt         DateTime? @map("deleted_at")
  isDeleted         Boolean   @default(false) @map("is_deleted")
  tags              Tag[]     @relation("contact_tags")

  @@map("contacts")
}

model Address {
  id          String  @id @default(uuid())
  workspaceId String  @map("workspace_id")
  street      String?
  city        String?
  country     String
  state       String?
  zip         String?

  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?  @map("company_id")

  @@map("addresses")
}

enum SourceType {
  ReferalSource
  LeadSource
  CompaignSource
}

model Source {
  id          String     @id @default(uuid())
  name        String
  workspaceId String     @map("workspace_id")
  sourceType  SourceType @map("source_type")
  company     Company?   @relation("referal_sources", fields: [companyId], references: [id])
  companyId   String?
  contact     Contact?   @relation("referal_sources", fields: [contactId], references: [id])
  contactId   String?

  @@unique([name, workspaceId])
  @@map("sources")
}
