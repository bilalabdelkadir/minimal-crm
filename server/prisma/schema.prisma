generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id                       String      @id @default(uuid())
  email                    String      @unique
  firstName                String      @map("first_name")
  lastName                 String?     @map("last_name")
  password                 String
  phoneNumber              String?     @unique @map("phone_number")
  isPhoneVerified          Boolean     @default(false) @map("is_phone_verified")
  isEmailVerified          Boolean     @default(false) @map("is_email_verified")
  isMultiFactorAuthEnabled Boolean     @default(false) @map("is_multi_factor_auth_enabled")
  profilePicture           Image?      @relation("profilePicture", fields: [profilePictureId], references: [id])
  profilePictureId         String?     @map("profile_picture_id")
  refreshToken             String?     @map("refresh_token")
  createdAt                DateTime    @default(now()) @map("created_at")
  updatedAt                DateTime    @default(now()) @updatedAt @map("updated_at")
  deletedAt                DateTime?   @map("deleted_at")
  associatedWorkspaces     Workspace[] @relation("associatedWorkspaces")
  otp                      Otp[]       @relation("otp")
  ownedWorkspaces          Workspace[] @relation("ownedBy")
  createdWorkdpaces        Workspace[] @relation("createdBy")
  defaultWorkspace         Workspace?  @relation("defaultWorkspace", fields: [defaultWorkspaceId], references: [id])
  defaultWorkspaceId       String?     @map("default_workspace_id")

  @@index([email, phoneNumber, createdAt])
  @@map("users")
}

model Role {
  id          String       @id @default(uuid())
  roleName    String       @map("role_name")
  description String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at")
  deletedAt   DateTime?    @map("deleted_at")
  workspaceId String       @map("workspace_id")
  permissions Permission[]

  @@unique([roleName, workspaceId])
  @@index([roleName, workspaceId])
  @@map("roles")
}

enum PermissionActions {
  CREATE
  READ
  UPDATE
  DELETE
  PRINT
  EXPORT
  IMPORT
  MANAGE
  APPROVE
  REJECT
  DOWNLOAD
}

model Permission {
  id          String              @id @default(uuid())
  moduleName  String
  actions     PermissionActions[]
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @default(now()) @updatedAt @map("updated_at")
  deletedAt   DateTime?           @map("deleted_at")
  role        Role                @relation(fields: [roleId], references: [id])
  roleId      String              @map("role_id")
  workspaceId String              @map("workspace_id")

  @@unique([moduleName, roleId])
  @@index([moduleName, workspaceId])
  @@map("permissions")
}

enum OtpSentTo {
  EMAIL
  PHONE
}

model Otp {
  id          String    @id @default(uuid())
  otp         Int       @map("otp")
  email       String?
  phoneNumber String?   @map("phone_number")
  createdAt   DateTime  @default(now()) @map("created_at")
  expiredAt   DateTime  @map("expired_at")
  user        User?     @relation("otp", fields: [userId], references: [id])
  userId      String?   @unique @map("user_id")
  sentOver    OtpSentTo @map("sent_over")
  verifiedAt  DateTime? @map("verified_at")

  @@unique([otp, userId])
  @@map("otps")
}

model Workspace {
  id               String    @id @default(uuid())
  name             String
  description      String?
  logo             Image?    @relation("logo", fields: [logoId], references: [id])
  logoId           String?   @map("logo_id")
  website          String?
  country          String?
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt        DateTime? @map("deleted_at")
  users            User[]    @relation("associatedWorkspaces")
  createdBy        User      @relation("createdBy", fields: [createdById], references: [id])
  createdById      String    @map("created_by")
  ownedBy          User      @relation("ownedBy", fields: [ownedById], references: [id])
  ownedById        String    @map("owned_by")
  defaultWorkspace User[]    @relation("defaultWorkspace")

  @@index([name])
  @@map("workspaces")
}

model Image {
  id        String      @id @default(uuid())
  url       String
  publicId  String      @map("public_id")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  workspace Workspace[] @relation("logo")
  user      User[]      @relation("profilePicture")

  @@map("images")
}
